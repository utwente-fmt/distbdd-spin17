/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
/*
 * Sugar.pr - Various and sundry readability-enhancing (we hope) macros
 */

#ifndef __SUGAR__
#define __SUGAR__

  /* We often want to have a promela if-block of the form:                   */
  /*   if                                                                    */
  /*   :: condition -> statements...;                                        */
  /*   :: else -> skip;                                                      */
  /*   fi                                                                    */
  /* which is analogous to an if-then statement in other languages.  We      */
  /* provide this with less syntactic noise (and indention headachres) via   */
  /* the onlyIf() macro.                                                     */

#define onlyIf(condition,statements)                                        \
  if                                                                        \
  :: condition -> statements                                                \
  :: else /*-> assert(!(condition))*/;                                      \
  fi

  /*
   * assert(0) just doesn't cut it sometimes.  We'd like a full blown
   * Big Red Button to push when things go wrong, wrong, wrong.
   */
#define panic(str)				\
   printf (str);				\
   assert(0)


  /* Bits used as booleans should look explicitly like booleans.             */

#define FALSE 0
#define TRUE  1

#endif /* __SUGAR__ */
