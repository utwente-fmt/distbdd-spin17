/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
/*
 * EntryPoint.pr - Fluke kernel entry-point identifier.  Really just an
 *                 enumerated list of entry points.  Corresponds to "EIP" in
 *                 the C code.
 */

/*
 * Type:        EntryPoint
 *
 * Definitions: none
 *
 * Constructor: none
 *
 * Operations
 * ----------
 * none
 */

#ifndef __ENTRYPOINT__
#define __ENTRYPOINT__

/*-- EntryPoint type --------------------------------------------------------*/

  /* The EntryPoint dispatch mechanism is how interruptability is acheived   */
  /* in Fluke.  The idea is that a thread knows an entry point that          */
  /* corresponds to some recent state in an in-progress operation.  A long   */
  /* operation will periodically update this information as the operation    */
  /* progresses.  Should the operation be interrupted, it can be restarted   */
  /* from the most recent clean entrypoint.  Since user code enters the      */
  /* kernel via the same mechanism, the kernel does not need to know or care */
  /* whether a given operation is a restarted operation or a new call coming */
  /* from the user.                                                          */

#define EntryPoint byte

/* Generic Entrypoints */

#define ENTRYPOINT_UNDEFINED                         0
#define ENTRYPOINT_NOP                               1

#ifdef  INCLUDE_THREAD_CANCEL
#define ENTRYPOINT_THREAD_CANCEL		     2
#endif

/* Client-side IPC Entrypoints */

#ifdef  INCLUDE_CLIENT_CONNECT_SEND              
#define ENTRYPOINT_CLIENT_CONNECT_SEND               10
#endif
#ifdef  INCLUDE_CLIENT_ACK_SEND
#define ENTRYPOINT_CLIENT_ACK_SEND                   11
#endif
#ifdef  INCLUDE_CLIENT_SEND
#define ENTRYPOINT_CLIENT_SEND                       12
#endif
#ifdef  INCLUDE_CLIENT_CONNECT_SEND_OVER_RECEIVE
#define ENTRYPOINT_CLIENT_CONNECT_SEND_OVER_RECEIVE  13
#endif
#ifdef  INCLUDE_CLIENT_ACK_SEND_OVER_RECEIVE
#define ENTRYPOINT_CLIENT_ACK_SEND_OVER_RECEIVE      14
#endif
#ifdef  INCLUDE_CLIENT_SEND_OVER_RECEIVE
#define ENTRYPOINT_CLIENT_SEND_OVER_RECEIVE          15
#endif
#ifdef  INCLUDE_CLIENT_RECEIVE
#define ENTRYPOINT_CLIENT_RECEIVE                    16
#endif
#ifdef  INCLUDE_CLIENT_DISCONNECT
#define ENTRYPOINT_CLIENT_DISCONNECT                 17
#endif

/* Server-side IPC Entrypoints */

#ifdef  INCLUDE_WAIT_RECEIVE
#define ENTRYPOINT_WAIT_RECEIVE                      20
#endif
#ifdef  INCLUDE_SERVER_ACK_SEND
#define ENTRYPOINT_SERVER_ACK_SEND                   21
#endif
#ifdef  INCLUDE_SERVER_SEND
#define ENTRYPOINT_SERVER_SEND                       22
#endif
#ifdef  INCLUDE_SERVER_ACK_SEND_WAIT_RECEIVE
#define ENTRYPOINT_SERVER_ACK_SEND_WAIT_RECEIVE      23
#endif
#ifdef  INCLUDE_SERVER_ACK_SEND_OVER_RECEIVE
#define ENTRYPOINT_SERVER_ACK_SEND_OVER_RECEIVE      24
#endif
#ifdef  INCLUDE_SERVER_SEND_WAIT_RECEIVE 
#define ENTRYPOINT_SERVER_SEND_WAIT_RECEIVE          25
#endif
#ifdef  INCLUDE_SERVER_SEND_OVER_RECEIVE 
#define ENTRYPOINT_SERVER_SEND_OVER_RECEIVE          26
#endif
#ifdef  INCLUDE_SERVER_RECEIVE 
#define ENTRYPOINT_SERVER_RECEIVE                    27
#endif
#ifdef  INCLUDE_SERVER_DISCONNECT
#define ENTRYPOINT_SERVER_DISCONNECT                 28
#endif

#endif /* __ENTRYPOINT__ */
