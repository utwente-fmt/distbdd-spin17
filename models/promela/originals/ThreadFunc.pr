/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
/*
 * ThreadFunc.pr - Non-trivial operations on thread state.
 *
 * threadWaitUntilReady(thread)
 * threadWaitUntilReadyCallerAtomic(thread)
 *    thread (which must be the current thread) blocks until
 *    someone does a readyWaitingThread() on us.
 *
 * readyWaitingThread(thread)
 * readyWaitingThreadCallerAtomic(thread)
 *    thread is woken from a block.  It must already be
 *    waiting for us.
 */


/*
 * Thread blocks until it is readied by another
 * thread.
 * Assumes caller is atomic.
 */
#define threadWaitUntilReadyCallerAtomic(thread)	\
  assert(thread == currentThread);			\
  assert(threadWaitBlocked(thread) == FALSE);		\
  threadSetWaitBlocked(thread, TRUE);			\
  threadWaitBlocked(thread) == FALSE /* BLOCK */

/*
 * Thread blocks until it is readied by another
 * thread.
 * Atomic version
 */
#define threadWaitUntilReady(thread)		\
  atomic {					\
    threadWaitUntilReadyCallerAtomic(thread);	\
  }

/*
 * Ready the given thread.  It had best be waiting
 * for this.  This cannot be called on yourself.
 */
#define readyWaitingThreadCallerAtomic(thread)	\
  assert(thread != currentThread);		\
  assert(threadWaitBlocked(thread) == TRUE);	\
  threadSetWaitBlocked(thread, FALSE)


/*
 * Ready the given thread.  It had best be waiting
 * for this.
 * Atomic version.
 */
#define readyWaitingThread(thread)		\
  atomic {					\
    readyWaitingThreadCallerAtomic(thread);	\
  }
