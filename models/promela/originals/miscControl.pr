/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
/*
 * MiscControl-syntax.pr
 *
 * Check syntax of misc ../control/*.pr files
 */

#define INCLUDE_IPC_PAYLOAD

#include "../../fluke/Fluke.pr"
#include "../../fluke/Thread.pr"
#include "../../fluke/ResultCode.pr"
#include "../../control/ipcTransfer.pr"
#include "../../control/copyAround.pr"
#include "../../control/dispatch.pr"
#include "../../control/portsAndPsets.pr"
#include "../../fluke/Mutex.pr"

mtype = {
  FLUKE_MESSAGES
}

threadDefineInstances(1);
wqDefineInstances(1);
mutexDefineInstances(1);

proctype syntaxTest() {
  Thread currentThread, otherThread;
  WaitVal foo, bar;
  ResultCode rc, otherRc;
  Mutex m;

  /* ipcTransfer.pr */
#undef IPC_TRANSFER_CAN_FAULT
  ipcReliableTransfer(currentThread, otherThread);

#define IPC_TRANSFER_CAN_FAULT
  ipcReliableTransfer(currentThread, otherThread);

  /* copyAround.pr */
  copyinRemote();
  copyinLocal();
  copyoutRemote();
  copyoutLocal();
  copytoRemote(/*out*/otherRc);

  idThreadReadyCallerAtomic(currentThread);
  idThreadReady(currentThread);

  threadReadyCallerAtomic(currentThread);
  threadReady(currentThread);

  idThreadDispatchCallerAtomic(currentThread, m);
  idThreadDispatch(currentThread, m);
}

init {
  threadInitInstances(1);
  wqInitInstances(1);
  mutexInitInstances(1);
}
