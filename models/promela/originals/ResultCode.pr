/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
/*
 * ResultCode.pr - The type of the mysterious "rc" - kernel result codes
 */

#ifndef __RESULT_CODE__
#define __RESULT_CODE__

/* Result Codes are actually heavily overloaded things.  They can contain    */
/* kernel-internal control-flow specifiers, which start with KR ("Kernel     */
/* Result"), then can indicate successful completion of an operation with    */
/* RC_SUCCESS, or they can contain user-known failure description codes,     */
/* which start with FLUKE_.  It's all sorted out by the kernel entry layer,  */
/* which in our case is flukeControlProc, defined in Fluke.pr.               */

/* Invariant: KR_ codes are never returned to user mode.                     */

/*-- ResultCode type --------------------------------------------------------*/

#define ResultCode int /* occasionally used for WaitVals, etc. */

/*- Success code - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

#define RC_SUCCESS              0           /* The op successfully completed */

/*- User-level error codes - - - - - - - - - - - - - - - - - - - - - - - - - */

#define FLUKE_IPC_CONNECT_INVALID_DEST  10    /* invalid or stale port ref   */
#define FLUKE_IPC_ACK_DISCONNECTED      11    /* other side disconnected     */
#define FLUKE_IPC_SEND_DISCONNECTED     12    /* other side disconnected     */
#define FLUKE_IPC_OVER_DISCONNECTED     13    /* other side disconnected     */
#define FLUKE_IPC_RECV_REVERSED         14    /* connection was reversed     */
#define FLUKE_IPC_RECV_DISCONNECTED     15    /* other side disconnected     */
#define FLUKE_IPC_RECV_MORE_DATA        16    /* need more data buffers      */
#define FLUKE_IPC_RECV_MORE_REFS        17    /* need more receive refs      */
#define FLUKE_IPC_WAIT_ONEWAY           18    /* one-way msg received        */
#define FLUKE_IPC_WAIT_IDEMPOTENT       19    /* idempotent req received     */
#define FLUKE_IPC_REPLY_DISCONNECTED    20    /* caller didn't hang around   */

/*- Insanity conditions that can be returned to the user - - - - - - - - - - */

#define FLUKE_INSANITY_NOT_SENDER       50
#define FLUKE_INSANITY_NOT_RECEIVER	51

/*- Kernel-internal codes - - - - - - - - - - - - - - - - - - - - - - - - - -*/

#define KR_MINIMUM_MAGNITUDE 100   /* The smallest KR_ result code           */
#define KR_USER_EXCEPTION    100   /* Exception accessing user space         */
#define KR_PAGE_FAULT        101   /* Try to resolve in-kernel - gets turned */
                                   /* into KR_USER_EXCEPTION in Fluke        */
                                   /* control proc if can't be.              */
#define KR_CANCEL            102   /* Another thread has cancelled us        */
#define KR_NO_MEMORY         103   /* Unused: ran out of kernel memory       */
#define KR_RESTART           104   /* Restart the op from entrypoint         */
#define KR_INVALID           199   /* For "void" functions that use rc internally */

#endif /* __RESULT_CODE__ */
